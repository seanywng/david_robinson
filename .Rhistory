mutate(floor_to_raw = floor_to,
floor_to = as.numeric(floor_to),
zip_code = str_sub(as.character(na_if(zip_code, 0)), 1, 5),
floor_to = ifelse(floor_to > 90, NA, floor_to))
elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = max(floor_to))
library(tidyverse)
library(tidytuesdayR)
library(scales)
library(lubridate)
theme_set(theme_light())
tt <- tt_load("2022-12-06")
elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = max(floor_to, na.rm = TRUE))
elevators <- tt$elevators |>
janitor::clean_names() %>%
setNames(gsub("dv_", "", names(.))) |>
filter(longitude > -76) |>
mutate(floor_to_raw = floor_to,
floor_to = as.numeric(floor_to),
zip_code = str_sub(as.character(na_if(zip_code, 0)), 1, 5),
floor_to = ifelse(floor_to > 90, NA, floor_to))
elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = max(floor_to, na.rm = TRUE)) |>
arrange(desc(max_floor))
elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = max(floor_to, na.rm = TRUE),
n_elevators = n(),
.groups = "drop") |>
arrange(desc(max_floor))
elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
n_elevators = n(),
.groups = "drop") |>
arrange(desc(max_floor))
by_building <- elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
n_elevators = n(),
.groups = "drop") |>
arrange(desc(max_floor))
elevators <- tt$elevators |>
janitor::clean_names() %>%
setNames(gsub("dv_", "", names(.))) |>
filter(longitude > -76) |>
mutate(floor_to_raw = floor_to,
floor_to = as.numeric(floor_to),
floor_from = as.numeric(floor_from),
zip_code = str_sub(as.character(na_if(zip_code, 0)), 1, 5),
floor_to = ifelse(floor_to > 90, NA, floor_to))
by_building <- elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
min_floor = na_if(min(floor_from, na.rm = TRUE), -Inf),
n_elevators = n(),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(max_floor))
by_building <- elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
min_floor = na_if(min(floor_from, na.rm = TRUE), Inf),
n_elevators = n(),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(max_floor))
by_building <- elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
# min_floor = na_if(min(floor_from, na.rm = TRUE), Inf),
n_elevators = n(),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(max_floor))
by_building |>
filter(!is.na(max_floor)) |>
ggplot(aes(x = longitude, y = latitude)) +
geom_point()
by_building |>
filter(!is.na(max_floor)) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point()
by_building |>
filter(!is.na(max_floor)) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_continuous(trans = "log10")
by_building |>
filter(!is.na(max_floor)) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10))
by_building |>
filter(!is.na(max_floor)) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(30))
by_building |>
filter(!is.na(max_floor)) |>
arrange(desc(max_floor)) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(30))
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(30))
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10))
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10)) +
theme_void()
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10)) +
theme_void() +
labs(colour = "Height in floor\nbased on highest elevator")
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10)) +
ggthemes::theme_map() +
labs(colour = "Height in floor\nbased on highest elevator")
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10)) +
ggthemes::theme_map() +
labs(colour = "Height in floor\n(highest elevator)")
by_building |>
filter(!is.na(max_floor)) |>
arrange(max_floor) |>
ggplot(aes(x = longitude, y = latitude,
colour = max_floor)) +
geom_point() +
scale_color_gradient2(trans = "log10",
low = "blue", high = "red",
midpoint = log10(10)) +
ggthemes::theme_map() +
labs(colour = "Height in floors\n(highest elevator)")
elevators <- tt$elevators |>
janitor::clean_names() %>%
setNames(gsub("dv_", "", names(.))) |>
filter(longitude > -76) |>
mutate(floor_to_raw = floor_to,
floor_to = as.numeric(floor_to),
floor_from = as.numeric(floor_from),
zip_code = str_sub(as.character(na_if(zip_code, 0)), 1, 5),
floor_to = ifelse(floor_to > 90 | floor_to < 1, NA, floor_to))
by_building <- elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
# min_floor = na_if(min(floor_from, na.rm = TRUE), Inf),
n_elevators = n(),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(max_floor))
by_building |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
geom_mean = exp(mean(log(max_floor), na.rm = TRUE)))
by_building |>
filter(!is.na(zip_code))
by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE))) |>
arrange(desc(geom_mean_height))
by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
.groups = "drop") |>
filter(n_buildings >= 10) |>
arrange(desc(geom_mean_height))
by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
.groups = "drop") |>
filter(n_buildings >= 20) |>
arrange(desc(geom_mean_height))
by_zip_code <- by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
tallest_building = max(max_floor, na.rm = TRUE),
.groups = "drop") |>
filter(n_buildings >= 20) |>
arrange(desc(geom_mean_height))
library(tidyverse)
library(tidytuesdayR)
library(scales)
library(lubridate)
library(sf)
theme_set(theme_light())
tt <- tt_load("2022-12-06")
zip_codes <- read_sf("~/Downloads/ZIP_CODE_040114/")
library(tidyverse)
library(tidytuesdayR)
library(scales)
library(lubridate)
library(sf)
library(here)
theme_set(theme_light())
zip_codes <- read_sf("./nyc_zipcode_shapefile/geo_export_ec0580c0-d8d8-4f5f-a24d-bc8072c4e29d.shp")
joined_zip_codes <- zip_codes %>%
left_join(by_zip_code, by = c("ZIPCODE" = "zip_code")) %>%
mutate(population_density = POPULATION / AREA,
elevator_building_density = n_buildings / AREA)
zip_codes
joined_zip_codes <- zip_codes %>%
left_join(by_zip_code, by = c("modzcta" = "zip_code")) %>%
mutate(population_density = pop_est / AREA,
elevator_building_density = n_buildings / AREA)
by_zip_code
zip_codes <- read_sf("./nyc_zipcode_shapefile/geo_export_ec0580c0-d8d8-4f5f-a24d-bc8072c4e29d.shp") |>
mutate(area = st_area(geometry))
zip_codes
zip_codes <- read_sf("./nyc_zipcode_shapefile/geo_export_ec0580c0-d8d8-4f5f-a24d-bc8072c4e29d.shp") |>
mutate(area = st_area(geometry),
area = set_units(area, "kilometres^2"))
install.packages("units")
library(tidyverse)
library(tidytuesdayR)
library(scales)
library(lubridate)
library(sf)
library(here)
library(units)
theme_set(theme_light())
tt <- tt_load("2022-12-06")
elevators <- tt$elevators |>
janitor::clean_names() %>%
setNames(gsub("dv_", "", names(.))) |>
filter(longitude > -76) |>
mutate(floor_to_raw = floor_to,
floor_to = as.numeric(floor_to),
floor_from = as.numeric(floor_from),
zip_code = str_sub(as.character(na_if(zip_code, 0)), 1, 5),
floor_to = ifelse(floor_to > 90 | floor_to < 1, NA, floor_to))
zip_codes <- read_sf("./nyc_zipcode_shapefile/geo_export_ec0580c0-d8d8-4f5f-a24d-bc8072c4e29d.shp") |>
mutate(area = st_area(geometry),
area = set_units(area, "kilometres^2"))
zip_codes
by_building <- elevators |>
arrange(desc(floor_to)) |>
group_by(bin, house_number, street_name, zip_code, borough) |>
summarise(max_floor = na_if(max(floor_to, na.rm = TRUE), -Inf),
# min_floor = na_if(min(floor_from, na.rm = TRUE), Inf),
n_elevators = n(),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(max_floor))
by_zip_code <- by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
tallest_building = max(max_floor, na.rm = TRUE),
.groups = "drop") |>
filter(n_buildings >= 20) |>
arrange(desc(geom_mean_height))
joined_zip_codes <- zip_codes %>%
left_join(by_zip_code, by = c("modzcta" = "zip_code")) %>%
mutate(population_density = pop_est / area,
elevator_building_density = n_buildings / AREA)
joined_zip_codes <- zip_codes %>%
left_join(by_zip_code, by = c("modzcta" = "zip_code")) %>%
mutate(population_density = pop_est / area,
elevator_building_density = n_buildings / area)
joined_zip_codes <- zip_codes %>%
left_join(by_zip_code, by = c("modzcta" = "zip_code")) %>%
mutate(population_density = pop_est / area,
elevator_building_density = n_buildings / area)
joined_zip_codes
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = log10())
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = log10)
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10")
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10") +
ggthemes::theme_map()
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10") +
ggthemes::theme_map() +
themes(legend.position = "top",
legend.justification = "left")
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10") +
ggthemes::theme_map() +
theme(legend.position = "top",
legend.justification = "left")
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10") +
ggthemes::theme_map() +
theme(legend.position = "top",
legend.justification = "left",
legend.direction = "vertical")
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10") +
ggthemes::theme_map()
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(10),
trans = "log10") +
ggthemes::theme_map() +
coord_sf(datum = NA)
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(6),
trans = "log10") +
ggthemes::theme_map() +
coord_sf(datum = NA)
by_zip_code <- by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
n_buildings_w_height = sum(!is.na(max_floor)),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
tallest_building = max(max_floor, na.rm = TRUE),
.groups = "drop") |>
filter(n_buildings >= 20) |>
arrange(desc(geom_mean_height))
by_zip_code <- by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
n_buildings_w_height = sum(!is.na(max_floor)),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
tallest_building = max(max_floor, na.rm = TRUE),
.groups = "drop") |>
filter(n_buildings_height >= 20) |>
arrange(desc(geom_mean_height))
by_zip_code <- by_building |>
filter(!is.na(zip_code)) |>
group_by(zip_code, borough) |>
summarise(n_buildings = n(),
n_buildings_height = sum(!is.na(max_floor)),
geom_mean_height = exp(mean(log(max_floor), na.rm = TRUE)),
tallest_building = max(max_floor, na.rm = TRUE),
.groups = "drop") |>
filter(n_buildings_height >= 20) |>
arrange(desc(geom_mean_height))
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(6),
trans = "log10") +
ggthemes::theme_map() +
coord_sf(datum = NA)
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(6),
trans = "log10") +
ggthemes::theme_map() +
coord_sf(datum = NA) +
labs(colour = "Average height of buildings with elevators") +
theme(legend.position = "top")
joined_zip_codes |>
ggplot(aes(fill = geom_mean_height)) +
geom_sf(size = .1) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = log10(6),
trans = "log10") +
ggthemes::theme_map() +
coord_sf(datum = NA) +
labs(fill = "Average height of buildings with elevators") +
theme(legend.position = "top")
by_building |>
filter(!is.na(borough)) |>
ggplot(aes(x = max_floor, y = borough)) +
geom_boxplot() +
scale_x_log10()
install.packages("corpus")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 9.5)
library(tidyverse)
library(magrittr)
library(stopwords)
library(corpus)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 9.5)
library(tidyverse)
library(magrittr)
library(stopwords)
tmp <- tempfile()
system2("git", c("clone", "--recursive",
shQuote("https://github.com/patperry/r-corpus.git"), shQuote(tmp)))
devtools::install(tmp)
install.packages("corpus")
ged241 <- readRDS("C:/Users/seanywng/Downloads/ged241-rds/ged241.rds")
library(tidyverse)
library(tidytuesdayR)
library(scales)
library(lubridate)
library(sf)
library(here)
library(units)
theme_set(theme_light())
ged241 |> glimpse()
