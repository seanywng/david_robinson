scale_x_log10(labels = comma) +
labs(x = "Average number of players", y = "Ratio of Peak / Average")
g <- games %>%
filter(avg > 1000) %>%
filter(date == max(date)) %>%
arrange((avg_peak_perc)) %>%
ggplot(aes(x = avg, y = 1 / avg_peak_perc, label = gamename)) +
geom_point() +
geom_text(vjust = 1, hjust = 1, check_overlap = TRUE) +
scale_y_log10() +
scale_x_log10(labels = comma) +
labs(x = "Average number of players", y = "Ratio of Peak / Average")
ggplotly(g)
g <- games %>%
filter(avg > 1000) %>%
filter(date == max(date)) %>%
arrange((avg_peak_perc)) %>%
ggplot(aes(x = avg, y = 1 / avg_peak_perc, label = gamename)) +
geom_point() +
# geom_text(vjust = 1, hjust = 1, check_overlap = TRUE) +
scale_y_log10() +
scale_x_log10(labels = comma) +
labs(x = "Average number of players", y = "Ratio of Peak / Average")
ggplotly(g)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(skimr)
library(janitor)
theme_set(theme_light())
baseball_wins <- read_csv("https://raw.githubusercontent.com/thebioengineer/TidyX/master/TidyTuesday_Explained/023-Mailbag_and_Expected_Wins/Pythagorean%20Wins.csv") %>%
clean_names()
glimpse(baseball_wins)
baseball_wins %>% skim()
baseball_wins <- baseball_wins %>%
mutate(scoring_ration = runs_scored / runs_allowed,
win_pct = wins / (wins + losses))
br_pythag <- baseball_ratio %>%
mutate(win_pct_sclae = scoring_ratio^1 / (1 + scoring_ratio^1))
baseball_ratio <- baseball_wins %>%
mutate(scoring_ration = runs_scored / runs_allowed,
win_pct = wins / (wins + losses))
br_pythag <- baseball_ratio %>%
mutate(win_pct_sclae = scoring_ratio^1 / (1 + scoring_ratio^1))
baseball_wins <- read_csv("https://raw.githubusercontent.com/thebioengineer/TidyX/master/TidyTuesday_Explained/023-Mailbag_and_Expected_Wins/Pythagorean%20Wins.csv") %>%
clean_names()
baseball_ratio <- baseball_wins %>%
mutate(scoring_ration = runs_scored / runs_allowed,
win_pct = wins / (wins + losses))
br_pythag <- baseball_ratio %>%
mutate(win_pct_sclae = scoring_ratio^1 / (1 + scoring_ratio^1))
baseball_ratio <- baseball_wins %>%
mutate(scoring_ratio = runs_scored / runs_allowed,
win_pct = wins / (wins + losses))
br_pythag <- baseball_ratio %>%
mutate(win_pct_scale = scoring_ratio^1 / (1 + scoring_ratio^1))
br_pythag
baseball_error <- br_pythag %>%
mutate(error = win_pct - win_pct_scale)
baseball_error %>%
ggplot(aes(x = error)) +
geom_histogram(alpha = .5) +
geom_vline(xintercept = 0, size = 1.2, colour = "red", linetype = "dashed") +
labs(title = "Error between actual win% and pythagorean win%")
baseball_error %>%
ggplot() +
geom_histogram(aes(x = win_pct), fill = "light blue", alpha = .6) +
geom_histogram(aes(x = win_pct_scale), fill = "light green", alpha = .5) +
annotate("text", x = .3, y = 70, label = "Actual win%", colour = "light blue", size = 6) +
annotate("test", x = .3, y = 65, label = "Pyathagorean win%", colour = "light green", size = 6) +
ggtitle("Actual win% and Pythagorean win%")
baseball_error %>%
ggplot() +
geom_histogram(aes(x = win_pct), fill = "light blue", alpha = .6) +
geom_histogram(aes(x = win_pct_scale), fill = "light green", alpha = .5) +
annotate("text", x = .3, y = 70, label = "Actual win%", colour = "light blue", size = 6) +
annotate("text", x = .3, y = 65, label = "Pyathagorean win%", colour = "light green", size = 6) +
ggtitle("Actual win% and Pythagorean win%")
baseball_error %>%
ggplot() +
geom_histogram(aes(x = win_pct), fill = "light blue", alpha = .6) +
geom_histogram(aes(x = win_pct_scale), fill = "light green", alpha = .5) +
annotate("text", x = .3, y = 70, label = "Actual win%", colour = "light blue", size = 4) +
annotate("text", x = .3, y = 60, label = "Pyathagorean win%", colour = "light green", size = 4) +
ggtitle("Actual win% and Pythagorean win%")
mae <- mean(abs(baseball_error$error))
mae
3
br_pythag <- baseball_ratio %>%
mutate(win_pct_scale = scoring_ratio^1 / (1 + scoring_ratio^i))
i <- 3
br_pythag <- baseball_ratio %>%
mutate(win_pct_scale = scoring_ratio^1 / (1 + scoring_ratio^i))
baseball_error <- br_pythag %>%
mutate(error = win_pct - win_pct_scale)
baseball_error %>%
ggplot(aes(x = error)) +
geom_histogram(alpha = .5) +
geom_vline(xintercept = 0, size = 1.2, colour = "red", linetype = "dashed") +
labs(title = "Error between actual win% and pythagorean win%")
baseball_error %>%
ggplot(aes(x = error)) +
geom_histogram(alpha = .5) +
geom_vline(xintercept = 0, size = 1.2, colour = "red", linetype = "dashed") +
labs(title = "Error between actual win% and pythagorean win%")
baseball_error %>%
ggplot() +
geom_histogram(aes(x = win_pct), fill = "light blue", alpha = .6) +
geom_histogram(aes(x = win_pct_scale), fill = "light green", alpha = .5) +
annotate("text", x = .3, y = 70, label = "Actual win%", colour = "light blue", size = 4) +
annotate("text", x = .3, y = 60, label = "Pyathagorean win%", colour = "light green", size = 4) +
ggtitle("Actual win% and Pythagorean win%")
br_pythag <- baseball_ratio %>%
mutate(win_pct_scale = scoring_ratio^i / (1 + scoring_ratio^i))
baseball_error <- br_pythag %>%
mutate(error = win_pct - win_pct_scale)
baseball_error %>%
ggplot(aes(x = error)) +
geom_histogram(alpha = .5) +
geom_vline(xintercept = 0, size = 1.2, colour = "red", linetype = "dashed") +
labs(title = "Error between actual win% and pythagorean win%")
baseball_error %>%
ggplot(aes(x = error)) +
geom_histogram(alpha = .5) +
geom_vline(xintercept = 0, size = 1.2, colour = "red", linetype = "dashed") +
labs(title = "Error between actual win% and pythagorean win%")
baseball_error %>%
ggplot() +
geom_histogram(aes(x = win_pct), fill = "light blue", alpha = .6) +
geom_histogram(aes(x = win_pct_scale), fill = "light green", alpha = .5) +
annotate("text", x = .3, y = 70, label = "Actual win%", colour = "light blue", size = 4) +
annotate("text", x = .3, y = 60, label = "Pyathagorean win%", colour = "light green", size = 4) +
ggtitle("Actual win% and Pythagorean win%")
mae <- mean(abs(baseball_error$error))
mae
i_options <- seq(from = .5, to = 4, by = .1)
mae_results <- data.frame("Exp" = i_options, "Results" = NA)
mae_results <- data.frame("exp" = i_options, "results" = NA)
df2 <-  baseball_ratio[, 3:6]
head(df2)
for(i in 1:length(i_options)){
win_pct <-  df2$wins / (df2$wins + df2$losses)
pred_win_pct <- (df2$runs_scored / df2$runs_allowed)^i_options[i] / ((1 + df2$runs_scored / df2$runs_allowed)^i_options[1])
mae_results[i, 2] <- mean(abs(win_pct - pred_win_pct))
}
mae_results
i_options <- seq(from = .1, to = 4, by = .1)
mae_results <- data.frame("exp" = i_options, "results" = NA)
df2 <-  baseball_ratio[, 3:6]
for(i in 1:length(i_options)){
win_pct <-  df2$wins / (df2$wins + df2$losses)
pred_win_pct <- (df2$runs_scored / df2$runs_allowed)^i_options[i] / ((1 + df2$runs_scored / df2$runs_allowed)^i_options[1])
mae_results[i, 2] <- mean(abs(win_pct - pred_win_pct))
}
mae_results
i_options <- seq(from = .5, to = 4, by = .1)
mae_results <- data.frame("exp" = i_options, "results" = NA)
mae_results <- data.frame("exp" = i_options, "results" = NA)
df2 <-  baseball_ratio[, 3:6]
for(i in 1:length(i_options)){
win_pct <-  df2$wins / (df2$wins + df2$losses)
pred_win_pct <- (df2$runs_scored / df2$runs_allowed)^i_options[i] / ((1 + df2$runs_scored / df2$runs_allowed)^i_options[1])
mae_results[i, 2] <- mean(abs(win_pct - pred_win_pct))
}
mae_results
i_options <- seq(from = .1, to = 4, by = .1)
mae_results <- data.frame("exp" = i_options, "results" = NA)
df2 <-  baseball_ratio[, 3:6]
for(i in 1:length(i_options)){
win_pct <-  df2$wins / (df2$wins + df2$losses)
pred_win_pct <- (df2$runs_scored / df2$runs_allowed)^i_options[i] / ((1 + df2$runs_scored / df2$runs_allowed)^i_options[1])
mae_results[i, 2] <- mean(abs(win_pct - pred_win_pct))
}
mae_results
i_options <- seq(from = .5, to = 4, by = .1)
mae_results <- data.frame("exp" = i_options, "results" = NA)
df2 <-  baseball_ratio[, 3:6]
for(i in 1:length(i_options)){
win_pct <-  df2$wins / (df2$wins + df2$losses)
pred_win_pct <- (df2$runs_scored / df2$runs_allowed)^i_options[i] / ((1 + df2$runs_scored / df2$runs_allowed)^i_options[1])
mae_results[i, 2] <- mean(abs(win_pct - pred_win_pct))
}
mae_results
pythagorean_wins <-  function(score, allowed, i){
p_win_pct <- (score / allowed)^i / (1 + (score / allowed)^i)
return(p_win_pct)
}
for( i in 1:length(i_options)){
baseball_ratio_options <- baseball_ratio %>%
mutate(pred_win_pct = pythagorean_wins(
scored = runs_scored,
allowed = runs_allowed,
i = i_options[[i]]
)) %>%
select(win_pct, pred_win_pct)
mae_results[i, 2] <- mean(abs(baseball_ratio_options[[1]] - baseball_ratio_options[[2]]))
}
for( i in 1:length(i_options)){
baseball_ratio_options <- baseball_ratio %>%
mutate(pred_win_pct = pythagorean_wins(
scored = runs_scored,
allowed = runs_allowed,
i = i_options[[i]]
)) %>%
select(win_pct, pred_win_pct)
mae_results[i, 2] <- mean(abs(baseball_ratio_options[[1]] - baseball_ratio_options[[2]]))
}
pythagorean_wins
pythagorean_wins <-  function(scored, allowed, i){
p_win_pct <- (scored / allowed)^i / (1 + (scored / allowed)^i)
return(p_win_pct)
}
for( i in 1:length(i_options)){
baseball_ratio_options <- baseball_ratio %>%
mutate(pred_win_pct = pythagorean_wins(
scored = runs_scored,
allowed = runs_allowed,
i = i_options[[i]]
)) %>%
select(win_pct, pred_win_pct)
mae_results[i, 2] <- mean(abs(baseball_ratio_options[[1]] - baseball_ratio_options[[2]]))
}
mae_results
mae_results %>%
ggplot(aes(x = exp, y = results)) +
geom_line() +
labs(x = "Exponent", y = "Mean absolute error",
title = "Mean absolute erro for different exponents in Pyathagorean wins formula")
mae_results %>% min(results)
mae_results %>% min(result)
mae_results
mae_results %>% min(results)
mae_results
mae_results %>% filter(results == min(results))
min(mae_results$results)
mae_results %>% filter(results == min(results))
mae_tibble <- seq(from = .5, to = 4, by = .1) %>%
map_dfr(function(i)){
mae_tibble <- seq(from = .5, to = 4, by = .1) %>%
map_dfr(function(i){
baseball_ratio_options <-  baseball_ratio %>%
mutate(pred_win_pct = pythagorean_wins(
scored = runs_scored,
allowed = runs_allowed,
i = i
)) %>%
select(win_pct, pred_win_pct)
tibble(
exp = i,
results = mean(abs(baseball_ratio_options[[1]] - baseball_ratio_options[[2]]))
)
})
mae_tibble %>%
filter(results == min(results))
install.packages("directlabels")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggimage)
install.packages("ggimage")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggimage)
library(hrbrthemes)
library(RColorBrewer)
library(tidytuesdayR)
library(randomForest)
library(pROC)
library(caret)
theme_set(theme_light())
### load data ####
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
`%out%` <- Negate(`%in%`)
mean_data<-coffee_ratings %>%
summarise_at(.vars = c("sweetness", "aroma", "flavor", "body", "aftertaste"), .funs = c("mean")) %>%
pivot_longer(cols = sweetness:aftertaste, names_to = "category", values_to = "endpoints")
coffee_data <-  coffee_ratings %>%
group_by(country_of_origin) %>%
summarise_at(.vars = c("sweetness", "aroma", "flavor", "body", "aftertaste"), .funs = c("mean")) %>%
pivot_longer(cols = sweetness:aftertaste, names_to = "category", values_to = "value") %>%
left_join(mean_data) %>%
mutate(pos_neg = ifelse(endpoints - values > 0, "pos", "neg")) %>%
drop_na(country_of_origin)
mean_data<-coffee_ratings %>%
summarise_at(.vars = c("sweetness", "aroma", "flavor", "body", "aftertaste"), .funs = c("mean")) %>%
pivot_longer(cols = sweetness:aftertaste, names_to = "category", values_to = "endpoints")
coffee_data <-  coffee_ratings %>%
group_by(country_of_origin) %>%
summarise_at(.vars = c("sweetness", "aroma", "flavor", "body", "aftertaste"), .funs = c("mean")) %>%
pivot_longer(cols = sweetness:aftertaste, names_to = "category", values_to = "values") %>%
left_join(mean_data) %>%
mutate(pos_neg = ifelse(endpoints - values > 0, "pos", "neg")) %>%
drop_na(country_of_origin)
coffee<-"https://www.unlvfreepress.com/wp-content/uploads/2018/01/Coffee-Bean-1.png"
coffee_data
coffee_ratings
coffee_data %>%
ggplot(aes(x = country_of_origin, y = values)) +
geom_point() +
coord_flip() +
geom_hline(aes(yintercept = endpoints), lwd = 1.5, colour = "grey") +
geom_segment(aes(x = country_of_origin, xend = country_of_origin, y = endpoints, yend = values, colour = "pos_neg"), lwd = 1.2) +
geom_image(aes(image = coffee), size = .5) +
labs(x = "Country", y = "Score") +
scale_colour_brewer(palette = "BrGr") +
facet_wrap(~category) +
theme_ft_rc() +
theme(legend.position = "none")
coffee_data %>%
ggplot(aes(x = country_of_origin, y = values)) +
geom_point() +
coord_flip() +
geom_hline(aes(yintercept = endpoints), lwd = 1.5, colour = "grey") +
geom_segment(aes(x = country_of_origin, xend = country_of_origin, y = endpoints, yend = values, colour = "pos_neg"), lwd = 1.2) +
labs(x = "Country", y = "Score") +
scale_colour_brewer(palette = "BrGr") +
facet_wrap(~category) +
theme_ft_rc() +
theme(legend.position = "none")
coffee_data %>%
ggplot(aes(x = country_of_origin, y = values)) +
geom_point() +
coord_flip() +
geom_hline(aes(yintercept = endpoints), lwd = 1.5, colour = "grey") +
geom_segment(aes(x = country_of_origin, xend = country_of_origin, y = endpoints, yend = values, colour = "pos_neg"), lwd = 1.2) +
labs(x = "Country", y = "Score") +
scale_colour_brewer(palette = "BrGr") +
facet_wrap(~category) +
theme_ft_rc() +
theme(legend.position = "none")
coffee_data %>%
mutate(country_of_origin = fct_rev(country_of_origin)) %>%
ggplot(aes(x = country_of_origin, y = values)) +
geom_point() +
coord_flip() +
geom_hline(aes(yintercept = endpoints), lwd = 1.5, colour = "grey") +
geom_segment(aes(x = country_of_origin, xend = country_of_origin, y = endpoints, yend = values, colour = "pos_neg"), lwd = 1.2) +
labs(x = "Country", y = "Score") +
scale_colour_brewer(palette = "BrGr") +
facet_wrap(~category) +
theme_ft_rc() +
theme(legend.position = "none")
glimpse(coffee_ratings)
model_df <- coffee_ratings %>%
select(total_cup_points, species, country_of_origin, processing_method, aroma:moisture)
model_df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%
gather()
glimpse(coffee_ratings)
model_df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%
gather()
model_df <- model_df %>%
select(-processing_method) %>%
filter(!is.na(country_of_origin))
model_df %>%
ggplot(aes(x = total_cup_points)) +
geom_histogram()
quantile(model_df$total_cup_points)
model_df <- model_df %>%
select(-processing_method) %>%
filter(!is.na(country_of_origin)) %>%
filter(total_cup_points != 0) %>%
mutate(cup_points_bin = cut_number(total_cup_points, n = 4)) %>%
select(-total_cup_points)
model_df <- coffee_ratings %>%
select(total_cup_points, species, country_of_origin, processing_method, aroma:moisture)
model_df <- model_df %>%
select(-processing_method) %>%
filter(!is.na(country_of_origin)) %>%
filter(total_cup_points != 0) %>%
mutate(cup_points_bin = cut_number(total_cup_points, n = 4)) %>%
select(-total_cup_points)
model_df %>%
count(cup_points_bin) %>%
ggplot(aess(x = cup_points_bin, y = n)) +
geom_col() +
geom_label(aes(label = n))
model_df %>%
count(cup_points_bin) %>%
ggplot(aes(x = cup_points_bin, y = n)) +
geom_col() +
geom_label(aes(label = n))
model_df_factor <- model_df %>%
mutate(species = as.factor(species),
country_of_origin = as.factor(country_of_origin))
set.seed(7945)
N <- nrow(model_df_factor)
train_id <- sample(x = 1:N,
size = round(N * .7, 1),
replace = FALSE)
train <- model_df_factor[train_id]
N <- nrow(model_df_factor)
train_id <- sample(x = 1:N,
size = round(N * .7, 1),
replace = FALSE)
train <- model_df_factor[train_id]
train <- model_df_factor[train_id, ]
test <-  model_df_factor[-train_id, ]
model_df%>%
select(aroma:moisture) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram() +
facet_wrap(~key, scales = "free_x")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(tidytuesdayR)
library(randomForest)
library(pROC)
library(caret)
theme_set(theme_light())
### load data ####
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
`%out%` <- Negate(`%in%`)
model_df%>%
select(aroma:moisture) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram() +
facet_wrap(~key, scales = "free_x")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(tidytuesdayR)
library(randomForest)
library(pROC)
library(caret)
theme_set(theme_light())
### load data ####
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
`%out%` <- Negate(`%in%`)
model_df <- coffee_ratings %>%
select(total_cup_points, species, country_of_origin, processing_method, aroma:moisture)
model_df <- model_df %>%
select(-processing_method) %>%
filter(!is.na(country_of_origin)) %>%
filter(total_cup_points != 0) %>%
mutate(cup_points_bin = cut_number(total_cup_points, n = 4)) %>%
select(-total_cup_points)
model_df%>%
select(aroma:moisture) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram() +
facet_wrap(~key, scales = "free_x")
model_df_factor <- model_df %>%
mutate(species = as.factor(species),
country_of_origin = as.factor(country_of_origin))
set.seed(7945)
N <- nrow(model_df_factor)
train_id <- sample(x = 1:N,
size = round(N * .7, 1),
replace = FALSE)
train <- model_df_factor[train_id, ]
test <-  model_df_factor[-train_id, ]
num_trees <- 1000
fit_coffee <-  randomForest(cup_point_bin ~ ., data = train,
ntree = num_trees, mtry = 4)
fit_coffee <-  randomForest(cup_points_bin ~ ., data = train,
ntree = num_trees, mtry = 4)
fit_coffee
# variable importance
importance(fit_cofee)
# variable importance
importance(fit_coffee)
# print model output
fit_coffee
# variable importance
importance(fit_coffee)
varImpPlot(fit_coffee)
panel.background = element_rect(fill = "light grey
# making a nicer plot
data.frame(importance(fit_coffee)) %>%
arrange(desc(MeanDecreaseGini)) %>%
mutate(variable = rownames(.)) %>%
ggplot(aes(x = MeanDecreaseGini, y = reorder(variable, MeanDecreaseGini))) +
geom_point(size = 5) +
geom_errorbarh(aes(xmin = 0, xmax = MeanDecreaseGini), height = .1) +
labs(x = "Mean Decrease Gini", y = "",
title = "Random Forest Variable Importance Plot") +
theme(axis.text = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 20),
plot.background = element_rect(fill = "light grey"),
panel.background = element_rect(fill = "light grey"))
# making a nicer plot
data.frame(importance(fit_coffee)) %>%
arrange(desc(MeanDecreaseGini)) %>%
mutate(variable = rownames(.)) %>%
ggplot(aes(x = MeanDecreaseGini, y = reorder(variable, MeanDecreaseGini))) +
geom_point(size = 5) +
geom_errorbarh(aes(xmin = 0, xmax = MeanDecreaseGini), height = .1) +
labs(x = "Mean Decrease Gini", y = "",
title = "Random Forest Variable Importance Plot") +
theme(axis.text = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 20),
plot.background = element_rect(fill = "light grey"),
panel.background = element_rect(fill = "white"))
table(observed = train$cup_points_bin,
predicted = fit_coffee$predicted)
test$predicted_class <-  predict(fit_coffee, newdata = test, type = "response")
# test set confusion matrix
table(observed = test$cup_points_bin,
predicted = test$predicted_class)
# test set confusion matrix
pred_table <- table(observed = test$cup_points_bin,
predicted = test$predicted_class)
# calculating test set accuracy
paste("Model Accuracy",
paste(round(sum(diag(pred_table)) / sum(pred_table), 3) * 100, "%", sep = ""), sep = "=")
