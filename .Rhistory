select(aroma:moisture) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram() +
facet_wrap(~key, scales = "free_x")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(tidytuesdayR)
library(randomForest)
library(pROC)
library(caret)
theme_set(theme_light())
### load data ####
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
`%out%` <- Negate(`%in%`)
model_df%>%
select(aroma:moisture) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram() +
facet_wrap(~key, scales = "free_x")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(tidytuesdayR)
library(randomForest)
library(pROC)
library(caret)
theme_set(theme_light())
### load data ####
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
`%out%` <- Negate(`%in%`)
model_df <- coffee_ratings %>%
select(total_cup_points, species, country_of_origin, processing_method, aroma:moisture)
model_df <- model_df %>%
select(-processing_method) %>%
filter(!is.na(country_of_origin)) %>%
filter(total_cup_points != 0) %>%
mutate(cup_points_bin = cut_number(total_cup_points, n = 4)) %>%
select(-total_cup_points)
model_df%>%
select(aroma:moisture) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram() +
facet_wrap(~key, scales = "free_x")
model_df_factor <- model_df %>%
mutate(species = as.factor(species),
country_of_origin = as.factor(country_of_origin))
set.seed(7945)
N <- nrow(model_df_factor)
train_id <- sample(x = 1:N,
size = round(N * .7, 1),
replace = FALSE)
train <- model_df_factor[train_id, ]
test <-  model_df_factor[-train_id, ]
num_trees <- 1000
fit_coffee <-  randomForest(cup_point_bin ~ ., data = train,
ntree = num_trees, mtry = 4)
fit_coffee <-  randomForest(cup_points_bin ~ ., data = train,
ntree = num_trees, mtry = 4)
fit_coffee
# variable importance
importance(fit_cofee)
# variable importance
importance(fit_coffee)
# print model output
fit_coffee
# variable importance
importance(fit_coffee)
varImpPlot(fit_coffee)
panel.background = element_rect(fill = "light grey
# making a nicer plot
data.frame(importance(fit_coffee)) %>%
arrange(desc(MeanDecreaseGini)) %>%
mutate(variable = rownames(.)) %>%
ggplot(aes(x = MeanDecreaseGini, y = reorder(variable, MeanDecreaseGini))) +
geom_point(size = 5) +
geom_errorbarh(aes(xmin = 0, xmax = MeanDecreaseGini), height = .1) +
labs(x = "Mean Decrease Gini", y = "",
title = "Random Forest Variable Importance Plot") +
theme(axis.text = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 20),
plot.background = element_rect(fill = "light grey"),
panel.background = element_rect(fill = "light grey"))
# making a nicer plot
data.frame(importance(fit_coffee)) %>%
arrange(desc(MeanDecreaseGini)) %>%
mutate(variable = rownames(.)) %>%
ggplot(aes(x = MeanDecreaseGini, y = reorder(variable, MeanDecreaseGini))) +
geom_point(size = 5) +
geom_errorbarh(aes(xmin = 0, xmax = MeanDecreaseGini), height = .1) +
labs(x = "Mean Decrease Gini", y = "",
title = "Random Forest Variable Importance Plot") +
theme(axis.text = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 20),
plot.background = element_rect(fill = "light grey"),
panel.background = element_rect(fill = "white"))
table(observed = train$cup_points_bin,
predicted = fit_coffee$predicted)
test$predicted_class <-  predict(fit_coffee, newdata = test, type = "response")
# test set confusion matrix
table(observed = test$cup_points_bin,
predicted = test$predicted_class)
# test set confusion matrix
pred_table <- table(observed = test$cup_points_bin,
predicted = test$predicted_class)
# calculating test set accuracy
paste("Model Accuracy",
paste(round(sum(diag(pred_table)) / sum(pred_table), 3) * 100, "%", sep = ""), sep = "=")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
bird_baths <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-31/bird_baths.csv")
glimpse(bird_baths)
bird_baths %>%
filter(is.na(urban_rural)) %>%
arrange(-bird_count)
bird_baths %>%
filter(is.na(urban_rural)) %>%
arrange(-bird_count) %>%
slice_max(bird_count, n = 15)
top_birds <- bird_baths %>%
filter(is.na(urban_rural)) %>%
arrange(-bird_count) %>%
slice_max(bird_count, n = 15) %>%
pull(bird_type)
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(bird_count)
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(bird_count = sum(bird_count))
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(bird_count = mean(bird_count))
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count))
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count)) %>%
arrange(-mean)
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
arrange(-mean)
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = bird_type)) +
geom_point()
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
arrange(-mean) %>%
mutate(bird_type = fct_reorder(bird_type, mean)) %>%
ggplot(aes(x = mean, y = bird_type)) +
geom_point()
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = reorder(bird_type, mean))) +
geom_point()
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_point()
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_point(aes(colour = urban_rural))
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_point(aes(colour = urban_rural))
library(scales)
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
pivot_wider(names_from = urban_rural, values_from = bird_count)
segment_data <- bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
pivot_wider(names_from = urban_rural, values_from = count)
segment_data
segment_data <- bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
pivot_wider(names_from = urban_rural, values_from = mean)
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_point(aes(colour = urban_rural), size = 2) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = 1.5
) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = 1.5
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
theme_set(theme_light())
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = 1.5
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
segment_data
segment_data <- bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
pivot_wider(names_from = urban_rural, values_from = mean)
segment_data
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = 1.5
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = 1
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = fct_reorder(bird_type, mean))) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = .7
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = bird_type)) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = .7
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird")
bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = bird_type)) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = .7
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird", y = "", colour = "")
bird <-
bird_baths %>%
filter(!is.na(urban_rural) &
bird_type %in% top_birds)
bird <-
bird_baths %>%
filter(!is.na(urban_rural) &
bird_type %in% top_birds) %>%
mutate(bird_count = if_else(bird_count > 0, "bird", "no_bird")) %>%
mutate_if(as.character, as.factor)
bird <-
bird_baths %>%
filter(!is.na(urban_rural) &
bird_type %in% top_birds) %>%
mutate(bird_count = if_else(bird_count > 0, "bird", "no_bird")) %>%
mutate_if(is.character, as.factor)
library(tidymodels)
set.seed(123)
initial_split(bird, strata = bird_count)
split <- initial_split(bird, strata = bird_count)
train <- training(split)
test <- testing(split)
set.seed(234)
set.seed(234)
bird_folds <- vfold_cv(train, strata = bird_count)
glm_spec <- logistic_reg()
glimpse(bird_baths)
glimpse(train)
rec_basic <- recipe(bird_count ~ urban_rural + bird_type, data = train) %>%
step_dummy(all_nominal_predictors())
wf_basic <- workflow(rec_basic, glm_spec)
basic <- fit_resamples(wf_basic, bird_folds)
ctrl_pred <- control_resamples(save_pred = TRUE)
basic <- fit_resamples(wf_basic, bird_folds, ctrl_pred)
basic <- fit_resamples(wf_basic, bird_folds, control = ctrl_pred)
basic
# augment will add on a prediction
augment(basic)
# augment will add on a prediction
augment(basic) %>%
roc_curve(bird_count, .pred_bird) %>%
autoplot()
# adding interactions
interact <- basic %>%
step_interact(~ starts_with("urban_rural"):starts_with("bird_type"))
wf_interact <- workflow(interact, glm_spec)
# adding interactions
interact <-
rec_basic %>%
step_interact(~ starts_with("urban_rural"):starts_with("bird_type"))
wf_interact <- workflow(interact, glm_spec)
# adding interactions
rec_interact <-
rec_basic %>%
step_interact(~ starts_with("urban_rural"):starts_with("bird_type"))
wf_interact <- workflow(rec_interact, glm_spec)
interact <- fit_resamples(wf_interact, bird_folds, control = ctrl_pred)
augment(interact) %>%
roc_curve(bird_count, .pred_bird) %>%
autoplot()
bird_fit <- fit(wf_interact, train)
new_bird_data <-
tibble(bird_type = top_birds) %>%
crossing(urban_rural = c("Urban", "Rural"))
new_bird_data
augment(bird_fit, new_bird_data)
predict(bird_fit, new_bird_data, type = "conf_int")
bird_preds <- augment(bird_fit, new_bird_data) %>%
bind_cols(predict(bird_fit, new_bird_data, type = "conf_int"))
bird_preds %>%
ggplot(aes(.pred_bird, bird_type, colour = urban_rural)) %>%
geom_point(size = 2) %>%
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
bird_preds %>%
ggplot(aes(x = .pred_bird, y = bird_type, colour = urban_rural)) %>%
geom_point(size = 2) %>%
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
bird_preds %>%
ggplot(aes(x = .pred_bird, y = bird_type, colour = urban_rural)) +
geom_point(size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
bird_preds
bird_preds %>%
ggplot(aes(x = .pred_bird, y = bird_type, colour = urban_rural)) +
geom_errorbar(aes(xmin = .pred_lower_bird, xmax = .pred_upper_bird),
width = .2, size = 1.2, alpha = .5) +
geom_point(size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
bird_preds %>%
ggplot(aes(x = .pred_bird, y = bird_type, colour = urban_rural)) +
geom_errorbar(aes(xmin = .pred_lower_bird, xmax = .pred_upper_bird),
width = .2, size = 1.2, alpha = .3) +
geom_point(size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
bird_preds %>%
ggplot(aes(x = .pred_bird, y = bird_type, colour = urban_rural)) +
geom_errorbar(aes(xmin = .pred_lower_bird, xmax = .pred_upper_bird),
width = .4, size = 1.2, alpha = .3) +
geom_point(size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
p1 <- bird_baths %>%
filter(!is.na(urban_rural) & bird_type %in% top_birds) %>%
group_by(urban_rural, bird_type) %>%
summarise(mean = mean(bird_count),
count = sum(bird_count), .groups = "drop") %>%
ungroup() %>%
arrange(-mean) %>%
ggplot(aes(x = mean, y = bird_type)) +
geom_segment(
data = segment_data,
aes(x = Rural, xend = Urban,
y = bird_type, yend = bird_type),
alpha = .7, colour = "gray70", size = .7
) +
geom_point(aes(colour = urban_rural), size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Probability of seeing bird", y = "", colour = "")
p2 <- bird_preds %>%
ggplot(aes(x = .pred_bird, y = bird_type, colour = urban_rural)) +
geom_errorbar(aes(xmin = .pred_lower_bird, xmax = .pred_upper_bird),
width = .4, size = 1.2, alpha = .3) +
geom_point(size = 2) +
scale_x_continuous(labels = percent) +
labs(x = "Predicted probability of seeing bird", y = "", colour = "")
library(patchwork)
p1 + p2
