attendance_joined %>%
ggplot(aes(x = team_name, y = weekly_attendance, fill = playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip() +
scale_x_continuous(labels = comma)
library(scales)
library(tidymodels)
attendance_joined %>%
mutate(team_name = fct_reorder(weekly_attendance)) %>%
ggplot(aes(x = team_name, y = weekly_attendance, fill = playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip() +
scale_x_continuous(labels = comma)
attendance_joined %>%
mutate(team_name = fct_reorder(team_name, weekly_attendance)) %>%
ggplot(aes(x = team_name, y = weekly_attendance, fill = playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip() +
scale_x_continuous(labels = comma)
attendance_joined %>%
mutate(team_name = fct_reorder(team_name, weekly_attendance)) %>%
ggplot(aes(x = team_name, y = weekly_attendance, fill = playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip() +
scale_y_continuous(labels = comma)
attendance_joined %>%
filter(!is.na(weekly_attendance)) %>%
mutate(team_name = fct_reorder(team_name, weekly_attendance)) %>%
ggplot(aes(x = team_name, y = weekly_attendance, fill = playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip() +
scale_y_continuous(labels = comma)
attendance_joined %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(x = margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_joined %>%
mutate(week = factor(week)) %>%
ggplot(aes(x = week, y = weekly_attendance, fill = week)) +
geom_boxplot(show.legend = FALSE, outlier.alpha = 0.4)
attendance_df <- attendance_joined %>%
filter(!is.na(weekly_attendance)) %>%
select(weekly_attendance, team_name, year, week,
margin_of_victory, strength_of_schedule, playoffs)
glimpse(attendance_df)
attendance_split <- attendance_df %>%
initial_split(strata = playoffs) %>%
attendance_split <- attendance_df %>%
initial_split(strata = playoffs)
training(attendance_split)
attendance_split <- attendance_df %>%
initial_split(strata = playoffs)
nfl_train <- training(attendance_split)
nfl_test <- testing(attendance_split)
lm_spec <- linear_reg() %>%
set_engine(engine = "lm") %>%
lm_spec <- linear_reg() %>%
set_engine(engine = "lm")
lm_spec <- linear_reg() %>%
set_engine(engine = "lm")
lm_fit <- lm_spec %>%
fit(weekly_attendance ~ ., data = nfl_train)
lm_fit
lm_fit %>% tidy() %>%
arrange(-estimate)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_fit <- rf_spec %>%
fit(weekly_attendance ~ ., data = nfl_train)
rf_fit %>% tidy()
lm_fit %>%
predict(new_data = nfl_train)
results_train <- lm_fit %>%
predict(new_data = nfl_train) %>%
mutate(truth = nfl_train$weekly_attendance,
model = "lm") %>%
bind_rows(rf_fit %>%
predict(new_data = nfl_train) %>%
mutate(truth = nfl_train$weekly_attendance,
model = "rf"))
results_test <- lm_fit %>%
predict(new_data = nfl_test) %>%
mutate(truth = nfl_test$weekly_attendance,
model = "lm") %>%
bind_rows(rf_fit %>%
predict(new_data = nfl_test) %>%
mutate(truth = nfl_test$weekly_attendance,
model = "rf"))
results_train %>%
group_by(model) %>%
rmse(truth = truth, estimate = .pred)
results_test %>%
group_by(model) %>%
rmse(truth = truth, estimate = .pred)
results_test %>%
mutate(train = "testing") %>%
bind_rows(results_train %>%
mutate(train = "training")) %>%
ggplot(aes(x = truth, y = .pred, colour = model)) +
geom_abline(lty = 2, colour = "gray80") +
geom_point(alpha = 0.5) +
facet_wrap(~train)
results_test %>%
mutate(train = "testing") %>%
bind_rows(results_train %>%
mutate(train = "training")) %>%
ggplot(aes(x = truth, y = .pred, colour = model)) +
geom_abline(lty = 2, colour = "gray80", size = 1.5) +
geom_point(alpha = 0.5) +
facet_wrap(~train)
set.seed(1234)
nfl_folds <- vfold_cv(nfl_train, strata = playoffs)
nfl_folds
# fit resamples takes at least three functions
rf_res <- fit_resamples(
weekly_attendance ~ ., # it takes a model
rf_spec, # it takes a spec
nfl_fold, # it takes the folds
control = control_resamples(save_pred = TRUE)
)
# fit resamples takes at least three functions
rf_res <- fit_resamples(
rf_spec, # it takes a spec
weekly_attendance ~ ., # it takes a model
nfl_fold, # it takes the folds
control = control_resamples(save_pred = TRUE)
)
# fit resamples takes at least three functions
rf_res <- fit_resamples(
rf_spec, # it takes a spec
weekly_attendance ~ ., # it takes a model
nfl_folds, # it takes the folds
control = control_resamples(save_pred = TRUE)
)
rf_res %>%
collect_metrics()
rf_res %>%
unnest(.predictions)
rf_res %>%
unnest(.predictions) %>%
ggplot(aes(x = weekly_attendance, y = .pred, colour = id)) +
geom_abline(lty = 2, colour = "gray80", size = 1.5) +
geom_point(alpha = 0.3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
members <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/members.csv")
members
members %>%
count(peak_id)
members %>%
count(peak_id, sort = TRUE)
install.packages("skimR")
yes
1
install.packages("skimr")
library(skimr)
skim(members)
members %>%
groups_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success))
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success))
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(died:success, names_to = "outcome", values = "percent") %>%
ggplot(aes(x = year, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1)
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values = "percent") %>%
ggplot(aes(x = year, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1)
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = year, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1)
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = year, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1) +
scale_y_continuous(labels = scales::percent())
library(scales)
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = year, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1) +
scale_y_continuous(labels = percent)
members %>%
group_by(year = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = year, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 1))
members %>%
group_by(age = 10 * (year %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = age, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 1))
members %>%
group_by(age = 10 * (age %/% 10)) %>%
summarise(died = mean(died),
success = mean(success)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = age, y = percent, colour = outcome)) +
geom_line(alpha = 0.7, size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 1))
members %>%
count(success, died) %>%
group_by(success) %>%
mutate(peercent = n / sum(n))
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, prop = 0.05)) %>%
count(peak_name, died)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, prop = 0.05)) %>%
count(peak_name, died) %>%
group_by(peak_name) %>%
mutate(percent = n / sum(n))
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
count(peak_name)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
count(peak_name)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
count(peak_name, sort = TRUE)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
group_by(peak_name) %>%
summarise(died = mean(died),
success = mean(success)) %>%
mutate(peak_name = fct_reorder(peak_name, died)) %>%
pivot_longer(cols = c(died, succes), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = percent, y = peak_name, fill = outcome)) +
geom_col() +
facet_wrap(~outcome)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
group_by(peak_name) %>%
summarise(died = mean(died),
success = mean(success)) %>%
mutate(peak_name = fct_reorder(peak_name, died)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = percent, y = peak_name, fill = outcome)) +
geom_col() +
facet_wrap(~outcome)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
group_by(peak_name) %>%
summarise(died = mean(died),
success = mean(success)) %>%
mutate(peak_name = fct_reorder(peak_name, died)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = percent, y = peak_name, fill = outcome)) +
geom_col() +
scale_x_continuous(labels = percent) +
facet_wrap(~outcome)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
group_by(peak_name) %>%
summarise(died = mean(died),
success = mean(success)) %>%
mutate(peak_name = fct_reorder(peak_name, died)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = percent, y = peak_name, fill = outcome)) +
geom_col() +
scale_x_continuous(labels = percent_format(accuracy = 1)) +
facet_wrap(~outcome)
members %>%
filter(!is.na(peak_name)) %>%
mutate(peak_name = fct_lump(peak_name, 10)) %>%
group_by(peak_name) %>%
summarise(died = mean(died),
success = mean(success)) %>%
mutate(peak_name = fct_reorder(peak_name, died)) %>%
pivot_longer(cols = c(died, success), names_to = "outcome", values_to = "percent") %>%
ggplot(aes(x = percent, y = peak_name, fill = outcome)) +
geom_col() +
scale_x_continuous(labels = percent_format(accuracy = 1)) +
facet_wrap(~outcome, scales = "free_x")
members %>%
filter(season != "Unknown") %>%
count(season, died) %>%
group_by(season) %>%
mutate(percent = n / sum(n()))
members %>%
filter(season != "Unknown") %>%
count(season, died) %>%
group_by(season) %>%
mutate(percent = n / sum(n))
members %>%
filter(season != "Unknown") %>%
count(season, died) %>%
group_by(season) %>%
mutate(percent = n / sum(n),
died = case_when(died ~ "Died",
TRUE ~ "Did not die")) %>%
ggplot(aes(season, percent, fill = season)) +
geom_col(show.legend = FALSE, position = "dodge") +
facet_wrap(~ died, scales = "free")
members %>%
filter(season != "Unknown") %>%
count(season, died) %>%
group_by(season) %>%
mutate(percent = n / sum(n),
died = case_when(died ~ "Died",
TRUE ~ "Did not die")) %>%
ggplot(aes(season, percent, fill = season)) +
geom_col(show.legend = FALSE, position = "dodge") +
facet_wrap(~ died, scales = "free") +
scale_y_continuous(labels = percent_format())
members_df <- members %>%
filter(season != "Unknown") %>%
select(peak_id, year, season, sex, age, citizenship, hired, success, died) %>%
filter(!is.na(sex), !is.na(citizenship)) %>%
mutate(died = case_when(died ~ "died",
TRUE ~ "survived")) %>%
mutate_if(is.character, factor)
members_df
set.seed(123)
members_split <- initial_split(members_df, strata = died)
train <- training(members_split)
test <- testing(members_split)
set.seed(345)
members_folds <- vfold_cv(members_train)
folds <- vfold_cv(train)
library(themis)
members_rec <- recipe(died ~ ., data = train) %>%
step_medianimpute(age) %>%
step_other(peak_id, citizenship) %>%
step_dummy(all_nominal(), -died) %>%
step_smote(died)
members_df <- members %>%
filter(season != "Unknown") %>%
select(peak_id, year, season, sex, age, citizenship, hired, success, died) %>%
filter(!is.na(sex), !is.na(citizenship)) %>%
mutate(died = case_when(died ~ "died",
TRUE ~ "survived")) %>%
mutate_if(is.character, factor) %>%
mutate_if(is.logical, as.integer)
set.seed(123)
members_split <- initial_split(members_df, strata = died)
train <- training(members_split)
test <- testing(members_split)
# setting cv resamples
set.seed(345)
folds <- vfold_cv(train)
members_rec <- recipe(died ~ ., data = train) %>%
step_impute_median(age) %>%
step_other(peak_id, citizenship) %>%
step_dummy(all_nominal(), -died) %>%
step_smote(died)
members_rec %>% prep(x %>% bake(new_data = NULL))
members_rec %>% prep() %>% bake(new_data = NULL))
members_rec %>% prep() %>% bake(new_data = NULL)
glm_spec <- logistic_reg() %>%
set_engine("glm")
rf_spec <- rand_forest(trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
members_wf <- workflow() %>%
add_recipe(members_rec)
doParallel::registerDoParallel()
# if you don't set any metric, it would compute ROC, AUC and accuracy
glm_rs <- members_wf %>%
add_model(glm_spec) %>%
fit_resamples(
resamples = folds,
metrics = metric_set(roc_auc, accuracy, sensitivity, specificity),
control = control_reamples(save_pred = TRUE)
)
# if you don't set any metric, it would compute ROC, AUC and accuracy
glm_rs <- members_wf %>%
add_model(glm_spec) %>%
fit_resamples(
resamples = folds,
metrics = metric_set(roc_auc, accuracy, sensitivity, specificity),
control = control_resamples(save_pred = TRUE)
)
rf_rs <- members_wf %>%
add_model(rf_spec) %>%
fit_resamples(
resamples = folds,
metrics = metric_set(roc_auc, accuracy, sensitivity, specificity),
control = control_resamples(save_pred = TRUE)
)
collect_metric(rf_rs)
collect_metrics(glm_rs)
collect_metrics(rf_rs)
collect_metrics(glm_rs)
collect_metrics(rf_rs)
collect_metrics(glm_rs)
glm_rs %>%
conf_mat_resampled()
rf_rs %>%
conf_mat_resampled()
glm_rs %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(died, .pred_died)
glm_rs %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(died, .pred_died) %>%
autoplot()
rf_rs %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(died, .pred_died) %>%
autoplot()
members_final <- members_wf %>%
add_model(glm_spec) %>%
last_fit(members_split)
collect_metrics(members_final)
collect_predictions(members_final)
collect_predictions(members_final) %>%
conf_mat(died, .pred_class)
arrange(estimate %>%
arrange(estimate %>%
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy(exponentiate = TRUE) %>%
arrange(estimate) %>%
kable(digits = 3)
members_final %>%
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy(exponentiate = TRUE) %>%
arrange(estimate) %>%
kable(digits = 3)
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy(exponentiate = TRUE) %>%
arrange(estimate) %>%
pander::pander()
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy() %>%
filter(term !=! "(Intercept)") %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point()
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy() %>%
filter(term != "(Intercept)") %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point()
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy() %>%
filter(term != "(Intercept)") %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(x = estimate, y = term)) +
geom_vline(xintercept = 0, colour = "gray50", lty = 2) +
geom_error(aes(xmin = estimate - std.error,
xmax = estimate + std.error),
width = 0.2)
members_final %>%
pull(.workflow) %>%
pluck(1) %>%
tidy() %>%
filter(term != "(Intercept)") %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(x = estimate, y = term)) +
geom_vline(xintercept = 0, colour = "gray50", lty = 2) +
geom_errorbar(aes(xmin = estimate - std.error,
xmax = estimate + std.error),
width = 0.2) +
geom_point()
